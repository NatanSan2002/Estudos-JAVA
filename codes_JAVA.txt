Terminal:
javac Nome_arquivo.java ||| compila código java, gerando um arquivo .class 
* o nome do arquivo tem que ser identico ao da Class dele

java Nome_arquivo ||| Executa código do arquivo.class

** não pode incluir o tipo.class do arquivo




GERAL

PACKAGE ||| Package são pastas e suas subpastas que podem serem importados para serem usados por outras Classes de pastas diferentes.


 ** pasta pessoas/Users.java**

package pessoas; ||| adiciona Classe ao package "pessoas"

public class Users[...]

-----

 **pasta app/RunApp.java**

import pessoas.Users; ||| importa só a Classe "Users" do Package "pessoas" 

import pessoas.*; ||| importa todo Package "pessoas"


public class RunApp[...]


----


KEY-WORDS: palavras que ficam antes das classes,variaveis etc...

default: conteudo disponivel somente para o mesmo package (esse é keyword padrão)
public: conteudo disponivel para qualquer package acessa-lo
private: conteudo privado para todos os packages, somente a classe que ele está tem acesso

**Package são pastas e suas subpastas, devem serem importadas etc... (estudar mais)

static: var é compartilhada por todos os Objetos da Classe, (Metodos tmb???)

void: Significa que o Método() não tem return(e se tivesse retun teria que ser posto nele o tipo do return, como int,String etc. static int Funcao(){})

main: Método principal, o primeiro da classe a ser executado 


Tipos Primitivos: Declarando Variaveis e seus tipos

int     nome_var = 5;         ||| numero inteiro (tmb tem o byte,short, e long)
double  nome_var = 0.586;     ||| numero quebrado (tmb tem o float que é 32 bits)
String  nome_var = "Texto";   ||| String
char    nome_var = 1          ||| Caracterie Unico
boolean nome_var = true;      ||| Boleano: false/true 


ARRAYS

int[] nome_array = {vetor1,vetor2,vetor3} ||| Declarando Array de tipo int

int[] nome_array; 
nome_array = new int[3] ||| Declarando array metodo 2 (o [3] é o numero de vetores máximo)

Class_Abstrata [] nome_array = new Class_Abstrata[3]; ||| Declarando Array com tipo Ref.Objeto

nome_array[0] = new Class_Abstrata() ||| Criando OBJ no vetor[0] do array
nome_array[0].attr = conteudo        ||| dando valor ao atributo(var de instancia) do obj do vetor[0] criado 
nome_array[0].Met()                  ||| Ativando metodo do OBJ do vetor[0] criado



ArrayLIST 

import java.util.ArrayList; ||| Importando packages do proprio Java  
import java.util.List;

List<tipo> lista = new ArrayList<>(); ||| Declarando Lista, São como Arrays só que com vetores infinitos

lista.add("Tipo String exemplo); ||| Adicionando Conteudof a Lista;




Arquivo .Java

public class NomeClasse{ ||| Classe dentro do arquivo.java

void metodo1(){instruções;}; ||| Métodos dentro da classe
void metodo2(){instruções;};


public static void main(String[] args){ ||| Método Main, o primeiro método a ser executado dentro da classe. (Todo programa precisa de ao menos um)
instruções;

}  ||| "(String[] args)" é um array de Strings, chamado "args", pode passar valores a ele e utiliza-los depois, na execução do arquivo com o comando "java". java Nome_arquivo valor1 valor2

}



OBJETOS

class ClassAbstrata{ ||| Classe Abstrata para Objetos

private tipo var1; ||| Atributos(vars) do objeto e seus tipos (exemplo: int,String )
private tipo var2; ||| estão como "private" para não poderem serem mudadas diretamente




public ClassAbstrata(tipo prop1,tipo prop2 ){ ||| Método Constructor, assim que um Objeto for criado, faz tudo desse método.

this.var1 = prop1; ||| Atributos recebendo as props de instancia
this.var2 = prop2; 

Método(); ||| Método do objeto sendo chamado

}



void Método(){} ||| Método do Objeto 

}




class ClassAbstrata_Test{ ||| Classe Testadora/Executadora (Mas geralmente outra classe,objeto é que vai ter o método main criando os objetos)

public static void main(String[] args){


ClassAbstrata nome_obj1 = new ClassAbstrata(prop1,prop2); ||| Criando um Objeto apartir da Classe, e passando Propriedades pro Met. Constructor dele. 


nome_obj1.Método(); ||| Executando Método do Objeto
}

}










FUNÇÕES:


ONLY JAVA
System.out.print(conteudo)   ||| Exibe na saida do console o conteudo
System.out.println(conteudo) ||| Quebra a linha e Exibe na saida do console o conteudo 


GENERAL
int var_nome = (int) (Math.random() * 5); ||| No metodo Math.random temos que especificar tmb se o valor de retorno dele sera INTeiro ou quebrado
                                              e como temos uma conta, colocamos () nela para por em precedencia ela a conversão ao tipo int
                                              ** o int de declaração de var só informa que a var é tipo int, não que converte-ra alguma coisa



Integer.parseInt(String)                  ||| Converte valor em String em int (guardar valor em algum lugar) 
Integer.toString(Int)                     ||| Converte valor em INT para String 

